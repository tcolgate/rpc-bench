// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wire.proto

package rpcbench

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CompressionType int32

const (
	CompressionType_NONE CompressionType = 0
)

var CompressionType_name = map[int32]string{
	0: "NONE",
}
var CompressionType_value = map[string]int32{
	"NONE": 0,
}

func (x CompressionType) String() string {
	return proto.EnumName(CompressionType_name, int32(x))
}
func (CompressionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RequestHeader struct {
	Id               uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Method           string          `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	MethodId         int32           `protobuf:"varint,3,opt,name=method_id,json=methodId" json:"method_id,omitempty"`
	Compression      CompressionType `protobuf:"varint,4,opt,name=compression,enum=rpcbench.CompressionType" json:"compression,omitempty"`
	UncompressedSize uint32          `protobuf:"varint,5,opt,name=uncompressed_size,json=uncompressedSize" json:"uncompressed_size,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RequestHeader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RequestHeader) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestHeader) GetMethodId() int32 {
	if m != nil {
		return m.MethodId
	}
	return 0
}

func (m *RequestHeader) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return CompressionType_NONE
}

func (m *RequestHeader) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

type ResponseHeader struct {
	Id               uint64          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Method           string          `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Error            string          `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Compression      CompressionType `protobuf:"varint,4,opt,name=compression,enum=rpcbench.CompressionType" json:"compression,omitempty"`
	UncompressedSize uint32          `protobuf:"varint,5,opt,name=uncompressed_size,json=uncompressedSize" json:"uncompressed_size,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ResponseHeader) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResponseHeader) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *ResponseHeader) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ResponseHeader) GetCompression() CompressionType {
	if m != nil {
		return m.Compression
	}
	return CompressionType_NONE
}

func (m *ResponseHeader) GetUncompressedSize() uint32 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "rpcbench.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "rpcbench.ResponseHeader")
	proto.RegisterEnum("rpcbench.CompressionType", CompressionType_name, CompressionType_value)
}

func init() { proto.RegisterFile("wire.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x91, 0x31, 0x4b, 0x03, 0x41,
	0x10, 0x85, 0xdd, 0xf3, 0x2e, 0xdc, 0x8d, 0xe4, 0x8c, 0x8b, 0xc8, 0x4a, 0x9a, 0x25, 0xd5, 0xa2,
	0x70, 0x85, 0x96, 0x96, 0x22, 0x68, 0x13, 0x61, 0xb4, 0x0f, 0xe6, 0x76, 0x20, 0x5b, 0x64, 0x77,
	0x9d, 0xbd, 0x20, 0xe6, 0x97, 0x59, 0xf9, 0xdb, 0x84, 0x9c, 0xc1, 0xc3, 0xce, 0xc6, 0x6e, 0xde,
	0x7b, 0xc3, 0xcc, 0x37, 0x0c, 0xc0, 0x9b, 0x63, 0x6a, 0x22, 0x87, 0x2e, 0xc8, 0x92, 0x63, 0xbb,
	0x24, 0xdf, 0xae, 0x66, 0x9f, 0x02, 0xc6, 0x48, 0xaf, 0x1b, 0x4a, 0xdd, 0x3d, 0xbd, 0x58, 0x62,
	0x59, 0x43, 0xe6, 0xac, 0x12, 0x5a, 0x98, 0x1c, 0x33, 0x67, 0xe5, 0x19, 0x8c, 0xd6, 0xd4, 0xad,
	0x82, 0x55, 0x99, 0x16, 0xa6, 0xc2, 0x6f, 0x25, 0xa7, 0x50, 0xf5, 0xd5, 0xc2, 0x59, 0x75, 0xa8,
	0x85, 0x29, 0xb0, 0xec, 0x8d, 0x07, 0x2b, 0x6f, 0xe0, 0xa8, 0x0d, 0xeb, 0xc8, 0x94, 0x92, 0x0b,
	0x5e, 0xe5, 0x5a, 0x98, 0xfa, 0xea, 0xbc, 0xd9, 0xaf, 0x6d, 0x6e, 0x7f, 0xc2, 0xe7, 0xf7, 0x48,
	0x38, 0xec, 0x96, 0x97, 0x70, 0xb2, 0xf1, 0x7b, 0x83, 0xec, 0x22, 0xb9, 0x2d, 0xa9, 0x42, 0x0b,
	0x33, 0xc6, 0xc9, 0x30, 0x78, 0x72, 0x5b, 0x9a, 0x7d, 0x08, 0xa8, 0x91, 0x52, 0x0c, 0x3e, 0xd1,
	0x1f, 0x2f, 0x38, 0x85, 0x82, 0x98, 0x03, 0xef, 0xe8, 0x2b, 0xec, 0xc5, 0xff, 0xa1, 0x5f, 0x4c,
	0xe1, 0xf8, 0xd7, 0x30, 0x59, 0x42, 0x3e, 0x7f, 0x9c, 0xdf, 0x4d, 0x0e, 0x96, 0xa3, 0xdd, 0xa7,
	0xae, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x33, 0x24, 0x29, 0xb7, 0x01, 0x00, 0x00,
}
